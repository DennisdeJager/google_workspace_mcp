Metadata-Version: 2.4
Name: google-workspace-mcp
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: fastmcp>=2.2.5
Requires-Dist: google-api-python-client>=2.168.0
Requires-Dist: google-auth-httplib2>=0.2.0
Requires-Dist: google-auth-oauthlib>=1.2.2
Requires-Dist: httpx>=0.28.1
Requires-Dist: mcp[cli]>=1.6.0

# Google Workspace MCP

A Model Context Protocol (MCP) server for integrating Google Workspace services like Calendar into AI assistants.

## Overview

This MCP server provides tools and resources for accessing Google Workspace APIs through the Model Context Protocol, allowing AI assistants to interact with your Google Workspace data.

## Features

- OAuth 2.0 authentication with Google
- Calendar API integration
- Extensible architecture for adding more Google Workspace services

## Installation

### Prerequisites

- Python 3.12 or higher
- [uv](https://github.com/astral-sh/uv) for package management

### Setup

1. Clone the repository:

```bash
git clone https://github.com/your-username/google_workspace_mcp.git
cd google_workspace_mcp
```

2. Install the package in development mode:

```bash
uv pip install -e .
```

3. Set up Google Cloud project and OAuth credentials:
   - Go to the [Google Cloud Console](https://console.cloud.google.com/)
   - Create a new project
   - Enable the APIs you need (e.g., Google Calendar API)
   - Configure the OAuth consent screen
   - Create OAuth client ID credentials
   - Download the credentials as `client_secret.json` and place it in the project root

## Running the Server

### Quick Start with Inspector

The easiest way to start the server with the MCP Inspector for testing is to use the included startup script:

```bash
./with_inspector.sh
```

This script will:
- Verify all dependencies are installed
- Create any missing __init__.py files
- Install the package in development mode
- Start the server with the MCP Inspector

### Manual Start

To start the MCP server using stdio transport (for direct integration with AI assistants):

```bash
python main.py
```

This will start the server and listen for MCP requests on the standard input/output channels.

### Using HTTP Transport

For development and testing, you can run the server with HTTP transport:

```bash
python -c "from core.server import server; server.run(transport='http', port=8000)"
```

This will start the server on http://localhost:8000.

## Connecting to MCP Clients

### Direct Integration

AI assistants can connect directly to this server using the stdio transport. This is typically handled by the AI platform itself.

### Using the MCP Inspector

The MCP Inspector is an essential tool for testing and debugging your MCP server.

#### Install MCP Inspector

The MCP Inspector can be run directly with npx without installation:

```bash
npx @modelcontextprotocol/inspector <command>
```

#### Inspecting the Server

To inspect your locally developed server:

```bash
npx @modelcontextprotocol/inspector uv --directory path/to/google_workspace_mcp run main.py
```

Or for the installed package:

```bash
npx @modelcontextprotocol/inspector python -m google_workspace_mcp
```

#### Inspector UI

The Inspector provides a graphical interface for:
- Browsing available tools and resources
- Executing tools with different parameters
- Viewing tool execution results
- Testing authentication flows
- Debugging issues

## Available Tools

### Authentication Tools

- Tool: `start_auth`
- Description: Starts the authentication process with automatic browser handling
- Parameters:
  - `user_id`: Email address of the user

- Tool: `auth_status`
- Description: Checks the status of an authentication process
- Parameters:
  - `user_id`: Email address of the user

- Tool: `complete_auth`
- Description: Completes the authentication process with a manual code
- Parameters:
  - `user_id`: Email address of the user
  - `authorization_code`: The code received from Google

- Tool: `oauth2callback` (Advanced)
- Description: Low-level callback handler for OAuth 2.0 redirects
- Parameters:
  - `code`: Authorization code from Google
  - `state`: State parameter for security verification
  - `redirect_uri`: Custom redirect URI (optional)

### Calendar Tools

- Tool: `list_calendars`
- Description: Lists the user's calendars
- Parameters: None

- Tool: `get_events`
- Description: Gets events from a specified calendar
- Parameters:
  - `calendar_id`: ID of the calendar to fetch events from
  - `time_min`: Start time in ISO format (optional)
  - `time_max`: End time in ISO format (optional)
  - `max_results`: Maximum number of results to return (optional)

## Authentication

This server uses OAuth 2.0 for authentication with Google APIs. There are two ways to authenticate:

### Method 1: Automatic Browser-based Authentication (Recommended)

1. Use the `start_auth` tool:
   ```
   start_auth
   user_id: your.email@gmail.com
   ```
2. A browser window will open automatically to the Google authorization page
3. After authorizing, you'll be redirected to a success page
4. Check authentication status if needed:
   ```
   auth_status
   user_id: your.email@gmail.com
   ```

### Method 2: Manual Code Entry

For cases where automatic authentication doesn't work:

1. Use any calendar tool which will prompt for authentication
2. Open the authentication URL in your browser
3. After authorizing, extract the `code` parameter from the redirect URL
4. Complete authentication with:
   ```
   complete_auth
   user_id: your.email@gmail.com
   authorization_code: [PASTE CODE HERE]
   ```

Behind the scenes, the authentication flow works as follows:

1. The client requests an action that requires authentication
2. The server returns an authentication URL
3. The user authorizes access at this URL
4. Google redirects back with an authorization code
5. The code is exchanged for access and refresh tokens
6. The server stores these credentials for future requests

## Examples

### Example 1: List Calendars

```python
from mcp.client import ClientSession

async with ClientSession() as session:
    result = await session.execute_tool(
        server_name="google_workspace",
        tool_name="list_calendars"
    )
    print(result)
```

### Example 2: Get Calendar Events

```python
from mcp.client import ClientSession
from datetime import datetime, timedelta

# Get events for the next 7 days
time_min = datetime.now().isoformat()
time_max = (datetime.now() + timedelta(days=7)).isoformat()

async with ClientSession() as session:
    result = await session.execute_tool(
        server_name="google_workspace",
        tool_name="get_events",
        arguments={
            "calendar_id": "primary",
            "time_min": time_min,
            "time_max": time_max,
            "max_results": 10
        }
    )
    print(result)
```

## Development

### Project Structure

- `core/`: Core server implementation
- `auth/`: Authentication modules
- `gcalendar/`: Google Calendar integration
- `main.py`: Server entry point

### Adding New Tools

To add a new tool:

1. Create a new function in an appropriate module
2. Decorate it with `@server.tool`
3. Define the required parameters
4. Implement the logic
5. Return the result as a dictionary

Example:

```python
@server.tool("my_new_tool")
async def my_new_tool(param1: str, param2: int = None):
    """Description of what this tool does"""
    # Implementation
    return {
        "success": True,
        "data": result
    }
```

## Troubleshooting

### Common Issues

1. **ModuleNotFoundError**: Make sure you've installed the package in development mode
2. **Authentication errors**: Verify that your `client_secret.json` file is in the correct location
3. **API errors**: Check that you've enabled the required APIs in the Google Cloud Console

### Debugging

For more detailed logging:

```python
import logging
logging.basicConfig(level=logging.DEBUG)
```

## License

[MIT License](LICENSE)
